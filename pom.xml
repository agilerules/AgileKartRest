<?xml version="1.0" encoding="UTF-8"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.AgileKartRest</groupId>
	<artifactId>AgileKartRest</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<properties>
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.picketlink</groupId>
				<artifactId>picketlink-javaee-6.0</artifactId>
				<version>2.7.0.Final</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-6.0</artifactId>
				<version>3.0.2.Final</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>javax.annotation</groupId>
				<artifactId>jsr250-api</artifactId>
				<version>1.0</version>
				<scope>provided</scope>
			</dependency>
		</dependencies>

	</dependencyManagement>
	<dependencies>

		<!-- PicketLink Uber Dependency. It provides all PicketLink dependencies 
			from a single JAR. You still can define each module separately, if you want 
			to. -->
		<dependency>
			<groupId>org.picketlink</groupId>
			<artifactId>picketlink</artifactId>
			<scope>compile</scope>
		</dependency>

		<!-- PicketLink Simple Schema for IDM JPA Identity Store. This is just 
			a simple and specific schema that maps all types provided by PicketLink IDM 
			Basic Model. Eg.: User, Role and Group types. You can always provide your 
			own entities/schema in order to better satisfy your requirements. -->
		<dependency>
			<groupId>org.picketlink</groupId>
			<artifactId>picketlink-idm-simple-schema</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
    <groupId>org.glassfish</groupId>
    <artifactId>javax.json</artifactId>
    <version>1.0.4</version>
</dependency>


		<!-- Picket JSON Dependency. It provides an API to build JWT and JOSE based 
			tokens. We must define it separately because it depends on JSON-P (JSR-353) 
			which is a JEE7 library. EAP supports JEE6. -->
		<dependency>
			<groupId>org.picketlink</groupId>
			<artifactId>picketlink-json</artifactId>
			<scope>compile</scope>
		</dependency>


		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jackson-provider</artifactId>
			<version>3.0.9.Final</version>
			<scope>provided</scope>
		</dependency>

	</dependencies>
	<build>
		<finalName>AgileKartRest</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
